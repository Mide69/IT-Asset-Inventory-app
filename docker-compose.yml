version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: it-asset-postgres
    environment:
      POSTGRES_DB: it_asset_inventory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - it-asset-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build: .
    container_name: it-asset-app
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: it_asset_inventory
      DB_USER: postgres
      DB_PASSWORD: password
      LOG_LEVEL: info
    ports:
      - "3000:3000"
    volumes:
      - uploads_data:/app/uploads
    networks:
      - it-asset-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/healthcheck', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  uploads_data:

networks:
  it-asset-network:
    driver: bridge